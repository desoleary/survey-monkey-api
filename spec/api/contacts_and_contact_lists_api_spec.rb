=begin
#SurveyMonkey API V3 Minimal

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.27
=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ContactsAndContactListsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ContactsAndContactListsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ContactsAndContactListsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ContactsAndContactListsApi' do
    it 'should create an instance of ContactsAndContactListsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ContactsAndContactListsApi)
    end
  end

  # unit tests for create_a_new_contact
  # Create a new contact
  # Create a new contact, contacts can be sent survey invite messages using an email invite collector
  # @param [Hash] opts the optional parameters
  # @option opts [V3ContactsBody] :body 
  # @return [nil]
  describe 'create_a_new_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_a_contact
  # Get a contact
  # Get a contact by contact id
  # @param contact_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_a_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_contacts
  # Get all contacts
  # Get a list of all contacts
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_all_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
