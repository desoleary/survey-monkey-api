=begin
#SurveyMonkey API V3 Minimal

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.27
=end

module SwaggerClient
  class CollectorsAndInviteMessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a survey collector
    # Creates a webline or email collector for a given survey
    # @param [Hash] opts the optional parameters
    # @option opts [Model310099766CollectorsBody] :body 
    # @return [nil]
    def create_a_survey_collector(opts = {})
      create_a_survey_collector_with_http_info(opts)
      nil
    end

    # Create a survey collector
    # Creates a webline or email collector for a given survey
    # @param [Hash] opts the optional parameters
    # @option opts [Model310099766CollectorsBody] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_a_survey_collector_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.create_a_survey_collector ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/collectors'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#create_a_survey_collector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a collector by id
    # Get a collector by id
    # @param collector_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_a_collector_by_id(collector_id, opts = {})
      get_a_collector_by_id_with_http_info(collector_id, opts)
      nil
    end

    # Get a collector by id
    # Get a collector by id
    # @param collector_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_a_collector_by_id_with_http_info(collector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.get_a_collector_by_id ...'
      end
      # verify the required parameter 'collector_id' is set
      if @api_client.config.client_side_validation && collector_id.nil?
        fail ArgumentError, "Missing the required parameter 'collector_id' when calling CollectorsAndInviteMessagesApi.get_a_collector_by_id"
      end
      # resource path
      local_var_path = '/v3/collectors/{COLLECTOR_ID}'.sub('{' + 'COLLECTOR_ID' + '}', collector_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#get_a_collector_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get survey collectors
    # Get a list of collectors for a given survey
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_survey_collectors(opts = {})
      get_survey_collectors_with_http_info(opts)
      nil
    end

    # Get survey collectors
    # Get a list of collectors for a given survey
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_survey_collectors_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectorsAndInviteMessagesApi.get_survey_collectors ...'
      end
      # resource path
      local_var_path = '/v3/surveys/310099766/collectors'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectorsAndInviteMessagesApi#get_survey_collectors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
